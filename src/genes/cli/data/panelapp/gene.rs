/*
 * PanelApp API
 *
 * PanelApp API
 *
 * OpenAPI spec version: v1
 * Contact: panelapp@genomicsengland.co.uk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct Gene {
    #[serde(rename = "gene_data")]
    gene_data: Option<Value>,
    #[serde(rename = "entity_type")]
    entity_type: String,
    #[serde(rename = "entity_name")]
    entity_name: String,
    #[serde(rename = "confidence_level")]
    confidence_level: String,
    #[serde(rename = "penetrance")]
    penetrance: Option<String>,
    #[serde(rename = "mode_of_pathogenicity")]
    mode_of_pathogenicity: Option<String>,
    #[serde(rename = "publications")]
    publications: Vec<String>,
    #[serde(rename = "evidence")]
    evidence: Vec<String>,
    #[serde(rename = "phenotypes")]
    phenotypes: Vec<String>,
    #[serde(rename = "mode_of_inheritance")]
    mode_of_inheritance: String,
    #[serde(rename = "tags")]
    tags: Option<Vec<String>>,
    #[serde(rename = "panel")]
    panel: Option<crate::genes::cli::data::panelapp::Panel>,
    #[serde(rename = "transcript")]
    #[serde(skip_serializing_if = "Vec::is_empty")]
    #[serde(default)]
    transcript: Vec<String>,
}

impl Gene {
    pub fn new(
        entity_type: String,
        entity_name: String,
        confidence_level: String,
        publications: Vec<String>,
        evidence: Vec<String>,
        phenotypes: Vec<String>,
        mode_of_inheritance: String,
        transcript: Vec<String>,
    ) -> Gene {
        Gene {
            gene_data: None,
            entity_type,
            entity_name,
            confidence_level,
            penetrance: None,
            mode_of_pathogenicity: None,
            publications,
            evidence,
            phenotypes,
            mode_of_inheritance,
            tags: None,
            panel: None,
            transcript,
        }
    }

    pub fn set_gene_data(&mut self, gene_data: Value) {
        self.gene_data = Some(gene_data);
    }

    pub fn with_gene_data(mut self, gene_data: Value) -> Gene {
        self.gene_data = Some(gene_data);
        self
    }

    pub fn gene_data(&self) -> Option<&Value> {
        self.gene_data.as_ref()
    }

    pub fn reset_gene_data(&mut self) {
        self.gene_data = None;
    }

    pub fn set_entity_type(&mut self, entity_type: String) {
        self.entity_type = entity_type;
    }

    pub fn with_entity_type(mut self, entity_type: String) -> Gene {
        self.entity_type = entity_type;
        self
    }

    pub fn entity_type(&self) -> &String {
        &self.entity_type
    }

    pub fn set_entity_name(&mut self, entity_name: String) {
        self.entity_name = entity_name;
    }

    pub fn with_entity_name(mut self, entity_name: String) -> Gene {
        self.entity_name = entity_name;
        self
    }

    pub fn entity_name(&self) -> &String {
        &self.entity_name
    }

    pub fn set_confidence_level(&mut self, confidence_level: String) {
        self.confidence_level = confidence_level;
    }

    pub fn with_confidence_level(mut self, confidence_level: String) -> Gene {
        self.confidence_level = confidence_level;
        self
    }

    pub fn confidence_level(&self) -> &String {
        &self.confidence_level
    }

    pub fn set_penetrance(&mut self, penetrance: String) {
        self.penetrance = Some(penetrance);
    }

    pub fn with_penetrance(mut self, penetrance: String) -> Gene {
        self.penetrance = Some(penetrance);
        self
    }

    pub fn penetrance(&self) -> Option<&String> {
        self.penetrance.as_ref()
    }

    pub fn reset_penetrance(&mut self) {
        self.penetrance = None;
    }

    pub fn set_mode_of_pathogenicity(&mut self, mode_of_pathogenicity: String) {
        self.mode_of_pathogenicity = Some(mode_of_pathogenicity);
    }

    pub fn with_mode_of_pathogenicity(mut self, mode_of_pathogenicity: String) -> Gene {
        self.mode_of_pathogenicity = Some(mode_of_pathogenicity);
        self
    }

    pub fn mode_of_pathogenicity(&self) -> Option<&String> {
        self.mode_of_pathogenicity.as_ref()
    }

    pub fn reset_mode_of_pathogenicity(&mut self) {
        self.mode_of_pathogenicity = None;
    }

    pub fn set_publications(&mut self, publications: Vec<String>) {
        self.publications = publications;
    }

    pub fn with_publications(mut self, publications: Vec<String>) -> Gene {
        self.publications = publications;
        self
    }

    pub fn publications(&self) -> &Vec<String> {
        &self.publications
    }

    pub fn set_evidence(&mut self, evidence: Vec<String>) {
        self.evidence = evidence;
    }

    pub fn with_evidence(mut self, evidence: Vec<String>) -> Gene {
        self.evidence = evidence;
        self
    }

    pub fn evidence(&self) -> &Vec<String> {
        &self.evidence
    }

    pub fn set_phenotypes(&mut self, phenotypes: Vec<String>) {
        self.phenotypes = phenotypes;
    }

    pub fn with_phenotypes(mut self, phenotypes: Vec<String>) -> Gene {
        self.phenotypes = phenotypes;
        self
    }

    pub fn phenotypes(&self) -> &Vec<String> {
        &self.phenotypes
    }

    pub fn set_mode_of_inheritance(&mut self, mode_of_inheritance: String) {
        self.mode_of_inheritance = mode_of_inheritance;
    }

    pub fn with_mode_of_inheritance(mut self, mode_of_inheritance: String) -> Gene {
        self.mode_of_inheritance = mode_of_inheritance;
        self
    }

    pub fn mode_of_inheritance(&self) -> &String {
        &self.mode_of_inheritance
    }

    pub fn set_tags(&mut self, tags: Vec<String>) {
        self.tags = Some(tags);
    }

    pub fn with_tags(mut self, tags: Vec<String>) -> Gene {
        self.tags = Some(tags);
        self
    }

    pub fn tags(&self) -> Option<&Vec<String>> {
        self.tags.as_ref()
    }

    pub fn reset_tags(&mut self) {
        self.tags = None;
    }

    pub fn set_panel(&mut self, panel: crate::genes::cli::data::panelapp::Panel) {
        self.panel = Some(panel);
    }

    pub fn with_panel(mut self, panel: crate::genes::cli::data::panelapp::Panel) -> Gene {
        self.panel = Some(panel);
        self
    }

    pub fn panel(&self) -> Option<&crate::genes::cli::data::panelapp::Panel> {
        self.panel.as_ref()
    }

    pub fn reset_panel(&mut self) {
        self.panel = None;
    }

    pub fn set_transcript(&mut self, transcript: Vec<String>) {
        self.transcript = transcript;
    }

    pub fn with_transcript(mut self, transcript: Vec<String>) -> Gene {
        self.transcript = transcript;
        self
    }

    pub fn transcript(&self) -> &Vec<String> {
        &self.transcript
    }
}
