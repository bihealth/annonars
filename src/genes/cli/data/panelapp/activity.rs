/*
 * PanelApp API
 *
 * PanelApp API
 *
 * OpenAPI spec version: v1
 * Contact: panelapp@genomicsengland.co.uk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
pub struct Activity {
    #[serde(rename = "created")]
    created: Option<String>,
    #[serde(rename = "panel_name")]
    panel_name: Option<String>,
    #[serde(rename = "panel_id")]
    panel_id: Option<String>,
    #[serde(rename = "panel_version")]
    panel_version: Option<String>,
    #[serde(rename = "user_name")]
    user_name: Option<String>,
    #[serde(rename = "item_type")]
    item_type: Option<String>,
    #[serde(rename = "text")]
    text: String,
    #[serde(rename = "entity_name")]
    entity_name: Option<String>,
    #[serde(rename = "entity_type")]
    entity_type: Option<String>,
}

impl Activity {
    pub fn new(text: String) -> Activity {
        Activity {
            created: None,
            panel_name: None,
            panel_id: None,
            panel_version: None,
            user_name: None,
            item_type: None,
            text,
            entity_name: None,
            entity_type: None,
        }
    }

    pub fn set_created(&mut self, created: String) {
        self.created = Some(created);
    }

    pub fn with_created(mut self, created: String) -> Activity {
        self.created = Some(created);
        self
    }

    pub fn created(&self) -> Option<&String> {
        self.created.as_ref()
    }

    pub fn reset_created(&mut self) {
        self.created = None;
    }

    pub fn set_panel_name(&mut self, panel_name: String) {
        self.panel_name = Some(panel_name);
    }

    pub fn with_panel_name(mut self, panel_name: String) -> Activity {
        self.panel_name = Some(panel_name);
        self
    }

    pub fn panel_name(&self) -> Option<&String> {
        self.panel_name.as_ref()
    }

    pub fn reset_panel_name(&mut self) {
        self.panel_name = None;
    }

    pub fn set_panel_id(&mut self, panel_id: String) {
        self.panel_id = Some(panel_id);
    }

    pub fn with_panel_id(mut self, panel_id: String) -> Activity {
        self.panel_id = Some(panel_id);
        self
    }

    pub fn panel_id(&self) -> Option<&String> {
        self.panel_id.as_ref()
    }

    pub fn reset_panel_id(&mut self) {
        self.panel_id = None;
    }

    pub fn set_panel_version(&mut self, panel_version: String) {
        self.panel_version = Some(panel_version);
    }

    pub fn with_panel_version(mut self, panel_version: String) -> Activity {
        self.panel_version = Some(panel_version);
        self
    }

    pub fn panel_version(&self) -> Option<&String> {
        self.panel_version.as_ref()
    }

    pub fn reset_panel_version(&mut self) {
        self.panel_version = None;
    }

    pub fn set_user_name(&mut self, user_name: String) {
        self.user_name = Some(user_name);
    }

    pub fn with_user_name(mut self, user_name: String) -> Activity {
        self.user_name = Some(user_name);
        self
    }

    pub fn user_name(&self) -> Option<&String> {
        self.user_name.as_ref()
    }

    pub fn reset_user_name(&mut self) {
        self.user_name = None;
    }

    pub fn set_item_type(&mut self, item_type: String) {
        self.item_type = Some(item_type);
    }

    pub fn with_item_type(mut self, item_type: String) -> Activity {
        self.item_type = Some(item_type);
        self
    }

    pub fn item_type(&self) -> Option<&String> {
        self.item_type.as_ref()
    }

    pub fn reset_item_type(&mut self) {
        self.item_type = None;
    }

    pub fn set_text(&mut self, text: String) {
        self.text = text;
    }

    pub fn with_text(mut self, text: String) -> Activity {
        self.text = text;
        self
    }

    pub fn text(&self) -> &String {
        &self.text
    }

    pub fn set_entity_name(&mut self, entity_name: String) {
        self.entity_name = Some(entity_name);
    }

    pub fn with_entity_name(mut self, entity_name: String) -> Activity {
        self.entity_name = Some(entity_name);
        self
    }

    pub fn entity_name(&self) -> Option<&String> {
        self.entity_name.as_ref()
    }

    pub fn reset_entity_name(&mut self) {
        self.entity_name = None;
    }

    pub fn set_entity_type(&mut self, entity_type: String) {
        self.entity_type = Some(entity_type);
    }

    pub fn with_entity_type(mut self, entity_type: String) -> Activity {
        self.entity_type = Some(entity_type);
        self
    }

    pub fn entity_type(&self) -> Option<&String> {
        self.entity_type.as_ref()
    }

    pub fn reset_entity_type(&mut self) {
        self.entity_type = None;
    }
}
