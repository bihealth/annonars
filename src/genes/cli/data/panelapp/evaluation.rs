/* 
 * PanelApp API
 *
 * PanelApp API
 *
 * OpenAPI spec version: v1
 * Contact: panelapp@genomicsengland.co.uk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Evaluation {
  #[serde(rename = "created")]
  created: Option<String>,
  #[serde(rename = "rating")]
  rating: Option<String>,
  #[serde(rename = "mode_of_pathogenicity")]
  mode_of_pathogenicity: Option<String>,
  #[serde(rename = "publications")]
  publications: Option<Vec<String>>,
  #[serde(rename = "phenotypes")]
  phenotypes: Option<Vec<String>>,
  #[serde(rename = "moi")]
  moi: Option<String>,
  #[serde(rename = "current_diagnostic")]
  current_diagnostic: Option<bool>,
  /// Interruptions in the repeated sequence are reported as part of standard diagnostic practise
  #[serde(rename = "clinically_relevant")]
  clinically_relevant: Option<bool>
}

impl Evaluation {
  pub fn new() -> Evaluation {
    Evaluation {
      created: None,
      rating: None,
      mode_of_pathogenicity: None,
      publications: None,
      phenotypes: None,
      moi: None,
      current_diagnostic: None,
      clinically_relevant: None
    }
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> Evaluation {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_rating(&mut self, rating: String) {
    self.rating = Some(rating);
  }

  pub fn with_rating(mut self, rating: String) -> Evaluation {
    self.rating = Some(rating);
    self
  }

  pub fn rating(&self) -> Option<&String> {
    self.rating.as_ref()
  }

  pub fn reset_rating(&mut self) {
    self.rating = None;
  }

  pub fn set_mode_of_pathogenicity(&mut self, mode_of_pathogenicity: String) {
    self.mode_of_pathogenicity = Some(mode_of_pathogenicity);
  }

  pub fn with_mode_of_pathogenicity(mut self, mode_of_pathogenicity: String) -> Evaluation {
    self.mode_of_pathogenicity = Some(mode_of_pathogenicity);
    self
  }

  pub fn mode_of_pathogenicity(&self) -> Option<&String> {
    self.mode_of_pathogenicity.as_ref()
  }

  pub fn reset_mode_of_pathogenicity(&mut self) {
    self.mode_of_pathogenicity = None;
  }

  pub fn set_publications(&mut self, publications: Vec<String>) {
    self.publications = Some(publications);
  }

  pub fn with_publications(mut self, publications: Vec<String>) -> Evaluation {
    self.publications = Some(publications);
    self
  }

  pub fn publications(&self) -> Option<&Vec<String>> {
    self.publications.as_ref()
  }

  pub fn reset_publications(&mut self) {
    self.publications = None;
  }

  pub fn set_phenotypes(&mut self, phenotypes: Vec<String>) {
    self.phenotypes = Some(phenotypes);
  }

  pub fn with_phenotypes(mut self, phenotypes: Vec<String>) -> Evaluation {
    self.phenotypes = Some(phenotypes);
    self
  }

  pub fn phenotypes(&self) -> Option<&Vec<String>> {
    self.phenotypes.as_ref()
  }

  pub fn reset_phenotypes(&mut self) {
    self.phenotypes = None;
  }

  pub fn set_moi(&mut self, moi: String) {
    self.moi = Some(moi);
  }

  pub fn with_moi(mut self, moi: String) -> Evaluation {
    self.moi = Some(moi);
    self
  }

  pub fn moi(&self) -> Option<&String> {
    self.moi.as_ref()
  }

  pub fn reset_moi(&mut self) {
    self.moi = None;
  }

  pub fn set_current_diagnostic(&mut self, current_diagnostic: bool) {
    self.current_diagnostic = Some(current_diagnostic);
  }

  pub fn with_current_diagnostic(mut self, current_diagnostic: bool) -> Evaluation {
    self.current_diagnostic = Some(current_diagnostic);
    self
  }

  pub fn current_diagnostic(&self) -> Option<&bool> {
    self.current_diagnostic.as_ref()
  }

  pub fn reset_current_diagnostic(&mut self) {
    self.current_diagnostic = None;
  }

  pub fn set_clinically_relevant(&mut self, clinically_relevant: bool) {
    self.clinically_relevant = Some(clinically_relevant);
  }

  pub fn with_clinically_relevant(mut self, clinically_relevant: bool) -> Evaluation {
    self.clinically_relevant = Some(clinically_relevant);
    self
  }

  pub fn clinically_relevant(&self) -> Option<&bool> {
    self.clinically_relevant.as_ref()
  }

  pub fn reset_clinically_relevant(&mut self) {
    self.clinically_relevant = None;
  }

}



