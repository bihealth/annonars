/* 
 * PanelApp API
 *
 * PanelApp API
 *
 * OpenAPI spec version: v1
 * Contact: panelapp@genomicsengland.co.uk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Str {
  #[serde(rename = "gene_data")]
  gene_data: Option<Value>,
  #[serde(rename = "entity_type")]
  entity_type: String,
  #[serde(rename = "entity_name")]
  entity_name: String,
  #[serde(rename = "confidence_level")]
  confidence_level: String,
  #[serde(rename = "penetrance")]
  penetrance: Option<String>,
  #[serde(rename = "publications")]
  publications: Vec<String>,
  #[serde(rename = "evidence")]
  evidence: Vec<String>,
  #[serde(rename = "phenotypes")]
  phenotypes: Vec<String>,
  #[serde(rename = "mode_of_inheritance")]
  mode_of_inheritance: String,
  #[serde(rename = "repeated_sequence")]
  repeated_sequence: String,
  #[serde(rename = "chromosome")]
  chromosome: String,
  #[serde(rename = "grch37_coordinates")]
  grch37_coordinates: Vec<i32>,
  #[serde(rename = "grch38_coordinates")]
  grch38_coordinates: Vec<i32>,
  /// =< Maximum normal number of repeats
  #[serde(rename = "normal_repeats")]
  normal_repeats: i32,
  /// >= Minimum fully penetrant pathogenic number of repeats
  #[serde(rename = "pathogenic_repeats")]
  pathogenic_repeats: i32,
  #[serde(rename = "tags")]
  tags: Option<Vec<String>>,
  #[serde(rename = "panel")]
  panel: Option<::models::Panel>
}

impl Str {
  pub fn new(entity_type: String, entity_name: String, confidence_level: String, publications: Vec<String>, evidence: Vec<String>, phenotypes: Vec<String>, mode_of_inheritance: String, repeated_sequence: String, chromosome: String, grch37_coordinates: Vec<i32>, grch38_coordinates: Vec<i32>, normal_repeats: i32, pathogenic_repeats: i32) -> Str {
    Str {
      gene_data: None,
      entity_type: entity_type,
      entity_name: entity_name,
      confidence_level: confidence_level,
      penetrance: None,
      publications: publications,
      evidence: evidence,
      phenotypes: phenotypes,
      mode_of_inheritance: mode_of_inheritance,
      repeated_sequence: repeated_sequence,
      chromosome: chromosome,
      grch37_coordinates: grch37_coordinates,
      grch38_coordinates: grch38_coordinates,
      normal_repeats: normal_repeats,
      pathogenic_repeats: pathogenic_repeats,
      tags: None,
      panel: None
    }
  }

  pub fn set_gene_data(&mut self, gene_data: Value) {
    self.gene_data = Some(gene_data);
  }

  pub fn with_gene_data(mut self, gene_data: Value) -> Str {
    self.gene_data = Some(gene_data);
    self
  }

  pub fn gene_data(&self) -> Option<&Value> {
    self.gene_data.as_ref()
  }

  pub fn reset_gene_data(&mut self) {
    self.gene_data = None;
  }

  pub fn set_entity_type(&mut self, entity_type: String) {
    self.entity_type = entity_type;
  }

  pub fn with_entity_type(mut self, entity_type: String) -> Str {
    self.entity_type = entity_type;
    self
  }

  pub fn entity_type(&self) -> &String {
    &self.entity_type
  }


  pub fn set_entity_name(&mut self, entity_name: String) {
    self.entity_name = entity_name;
  }

  pub fn with_entity_name(mut self, entity_name: String) -> Str {
    self.entity_name = entity_name;
    self
  }

  pub fn entity_name(&self) -> &String {
    &self.entity_name
  }


  pub fn set_confidence_level(&mut self, confidence_level: String) {
    self.confidence_level = confidence_level;
  }

  pub fn with_confidence_level(mut self, confidence_level: String) -> Str {
    self.confidence_level = confidence_level;
    self
  }

  pub fn confidence_level(&self) -> &String {
    &self.confidence_level
  }


  pub fn set_penetrance(&mut self, penetrance: String) {
    self.penetrance = Some(penetrance);
  }

  pub fn with_penetrance(mut self, penetrance: String) -> Str {
    self.penetrance = Some(penetrance);
    self
  }

  pub fn penetrance(&self) -> Option<&String> {
    self.penetrance.as_ref()
  }

  pub fn reset_penetrance(&mut self) {
    self.penetrance = None;
  }

  pub fn set_publications(&mut self, publications: Vec<String>) {
    self.publications = publications;
  }

  pub fn with_publications(mut self, publications: Vec<String>) -> Str {
    self.publications = publications;
    self
  }

  pub fn publications(&self) -> &Vec<String> {
    &self.publications
  }


  pub fn set_evidence(&mut self, evidence: Vec<String>) {
    self.evidence = evidence;
  }

  pub fn with_evidence(mut self, evidence: Vec<String>) -> Str {
    self.evidence = evidence;
    self
  }

  pub fn evidence(&self) -> &Vec<String> {
    &self.evidence
  }


  pub fn set_phenotypes(&mut self, phenotypes: Vec<String>) {
    self.phenotypes = phenotypes;
  }

  pub fn with_phenotypes(mut self, phenotypes: Vec<String>) -> Str {
    self.phenotypes = phenotypes;
    self
  }

  pub fn phenotypes(&self) -> &Vec<String> {
    &self.phenotypes
  }


  pub fn set_mode_of_inheritance(&mut self, mode_of_inheritance: String) {
    self.mode_of_inheritance = mode_of_inheritance;
  }

  pub fn with_mode_of_inheritance(mut self, mode_of_inheritance: String) -> Str {
    self.mode_of_inheritance = mode_of_inheritance;
    self
  }

  pub fn mode_of_inheritance(&self) -> &String {
    &self.mode_of_inheritance
  }


  pub fn set_repeated_sequence(&mut self, repeated_sequence: String) {
    self.repeated_sequence = repeated_sequence;
  }

  pub fn with_repeated_sequence(mut self, repeated_sequence: String) -> Str {
    self.repeated_sequence = repeated_sequence;
    self
  }

  pub fn repeated_sequence(&self) -> &String {
    &self.repeated_sequence
  }


  pub fn set_chromosome(&mut self, chromosome: String) {
    self.chromosome = chromosome;
  }

  pub fn with_chromosome(mut self, chromosome: String) -> Str {
    self.chromosome = chromosome;
    self
  }

  pub fn chromosome(&self) -> &String {
    &self.chromosome
  }


  pub fn set_grch37_coordinates(&mut self, grch37_coordinates: Vec<i32>) {
    self.grch37_coordinates = grch37_coordinates;
  }

  pub fn with_grch37_coordinates(mut self, grch37_coordinates: Vec<i32>) -> Str {
    self.grch37_coordinates = grch37_coordinates;
    self
  }

  pub fn grch37_coordinates(&self) -> &Vec<i32> {
    &self.grch37_coordinates
  }


  pub fn set_grch38_coordinates(&mut self, grch38_coordinates: Vec<i32>) {
    self.grch38_coordinates = grch38_coordinates;
  }

  pub fn with_grch38_coordinates(mut self, grch38_coordinates: Vec<i32>) -> Str {
    self.grch38_coordinates = grch38_coordinates;
    self
  }

  pub fn grch38_coordinates(&self) -> &Vec<i32> {
    &self.grch38_coordinates
  }


  pub fn set_normal_repeats(&mut self, normal_repeats: i32) {
    self.normal_repeats = normal_repeats;
  }

  pub fn with_normal_repeats(mut self, normal_repeats: i32) -> Str {
    self.normal_repeats = normal_repeats;
    self
  }

  pub fn normal_repeats(&self) -> &i32 {
    &self.normal_repeats
  }


  pub fn set_pathogenic_repeats(&mut self, pathogenic_repeats: i32) {
    self.pathogenic_repeats = pathogenic_repeats;
  }

  pub fn with_pathogenic_repeats(mut self, pathogenic_repeats: i32) -> Str {
    self.pathogenic_repeats = pathogenic_repeats;
    self
  }

  pub fn pathogenic_repeats(&self) -> &i32 {
    &self.pathogenic_repeats
  }


  pub fn set_tags(&mut self, tags: Vec<String>) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: Vec<String>) -> Str {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> Option<&Vec<String>> {
    self.tags.as_ref()
  }

  pub fn reset_tags(&mut self) {
    self.tags = None;
  }

  pub fn set_panel(&mut self, panel: ::models::Panel) {
    self.panel = Some(panel);
  }

  pub fn with_panel(mut self, panel: ::models::Panel) -> Str {
    self.panel = Some(panel);
    self
  }

  pub fn panel(&self) -> Option<&::models::Panel> {
    self.panel.as_ref()
  }

  pub fn reset_panel(&mut self) {
    self.panel = None;
  }

}



