/*
 * PanelApp API
 *
 * PanelApp API
 *
 * OpenAPI spec version: v1
 * Contact: panelapp@genomicsengland.co.uk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct Region {
  #[serde(rename = "gene_data")]
  gene_data: Option<Value>,
  #[serde(rename = "entity_type")]
  entity_type: String,
  #[serde(rename = "entity_name")]
  entity_name: String,
  /// Region Name
  #[serde(rename = "verbose_name")]
  verbose_name: Option<String>,
  #[serde(rename = "confidence_level")]
  confidence_level: String,
  #[serde(rename = "penetrance")]
  penetrance: Option<String>,
  #[serde(rename = "mode_of_pathogenicity")]
  mode_of_pathogenicity: Option<String>,
  #[serde(rename = "haploinsufficiency_score")]
  haploinsufficiency_score: Option<String>,
  #[serde(rename = "triplosensitivity_score")]
  triplosensitivity_score: Option<String>,
  /// Required percent of overlap
  #[serde(rename = "required_overlap_percentage")]
  required_overlap_percentage: i32,
  #[serde(rename = "type_of_variants")]
  type_of_variants: Option<String>,
  #[serde(rename = "publications")]
  publications: Vec<String>,
  #[serde(rename = "evidence")]
  evidence: Vec<String>,
  #[serde(rename = "phenotypes")]
  phenotypes: Vec<String>,
  #[serde(rename = "mode_of_inheritance")]
  mode_of_inheritance: String,
  #[serde(rename = "chromosome")]
  chromosome: String,
  #[serde(rename = "grch37_coordinates")]
  grch37_coordinates: Vec<i32>,
  #[serde(rename = "grch38_coordinates")]
  grch38_coordinates: Vec<i32>,
  #[serde(rename = "tags")]
  tags: Option<Vec<String>>,
  #[serde(rename = "panel")]
  panel: Option<crate::genes::cli::data::panelapp::Panel>
}

impl Region {
  pub fn new(entity_type: String, entity_name: String, confidence_level: String, required_overlap_percentage: i32, publications: Vec<String>, evidence: Vec<String>, phenotypes: Vec<String>, mode_of_inheritance: String, chromosome: String, grch37_coordinates: Vec<i32>, grch38_coordinates: Vec<i32>) -> Region {
    Region {
      gene_data: None,
      entity_type: entity_type,
      entity_name: entity_name,
      verbose_name: None,
      confidence_level: confidence_level,
      penetrance: None,
      mode_of_pathogenicity: None,
      haploinsufficiency_score: None,
      triplosensitivity_score: None,
      required_overlap_percentage: required_overlap_percentage,
      type_of_variants: None,
      publications: publications,
      evidence: evidence,
      phenotypes: phenotypes,
      mode_of_inheritance: mode_of_inheritance,
      chromosome: chromosome,
      grch37_coordinates: grch37_coordinates,
      grch38_coordinates: grch38_coordinates,
      tags: None,
      panel: None
    }
  }

  pub fn set_gene_data(&mut self, gene_data: Value) {
    self.gene_data = Some(gene_data);
  }

  pub fn with_gene_data(mut self, gene_data: Value) -> Region {
    self.gene_data = Some(gene_data);
    self
  }

  pub fn gene_data(&self) -> Option<&Value> {
    self.gene_data.as_ref()
  }

  pub fn reset_gene_data(&mut self) {
    self.gene_data = None;
  }

  pub fn set_entity_type(&mut self, entity_type: String) {
    self.entity_type = entity_type;
  }

  pub fn with_entity_type(mut self, entity_type: String) -> Region {
    self.entity_type = entity_type;
    self
  }

  pub fn entity_type(&self) -> &String {
    &self.entity_type
  }


  pub fn set_entity_name(&mut self, entity_name: String) {
    self.entity_name = entity_name;
  }

  pub fn with_entity_name(mut self, entity_name: String) -> Region {
    self.entity_name = entity_name;
    self
  }

  pub fn entity_name(&self) -> &String {
    &self.entity_name
  }


  pub fn set_verbose_name(&mut self, verbose_name: String) {
    self.verbose_name = Some(verbose_name);
  }

  pub fn with_verbose_name(mut self, verbose_name: String) -> Region {
    self.verbose_name = Some(verbose_name);
    self
  }

  pub fn verbose_name(&self) -> Option<&String> {
    self.verbose_name.as_ref()
  }

  pub fn reset_verbose_name(&mut self) {
    self.verbose_name = None;
  }

  pub fn set_confidence_level(&mut self, confidence_level: String) {
    self.confidence_level = confidence_level;
  }

  pub fn with_confidence_level(mut self, confidence_level: String) -> Region {
    self.confidence_level = confidence_level;
    self
  }

  pub fn confidence_level(&self) -> &String {
    &self.confidence_level
  }


  pub fn set_penetrance(&mut self, penetrance: String) {
    self.penetrance = Some(penetrance);
  }

  pub fn with_penetrance(mut self, penetrance: String) -> Region {
    self.penetrance = Some(penetrance);
    self
  }

  pub fn penetrance(&self) -> Option<&String> {
    self.penetrance.as_ref()
  }

  pub fn reset_penetrance(&mut self) {
    self.penetrance = None;
  }

  pub fn set_mode_of_pathogenicity(&mut self, mode_of_pathogenicity: String) {
    self.mode_of_pathogenicity = Some(mode_of_pathogenicity);
  }

  pub fn with_mode_of_pathogenicity(mut self, mode_of_pathogenicity: String) -> Region {
    self.mode_of_pathogenicity = Some(mode_of_pathogenicity);
    self
  }

  pub fn mode_of_pathogenicity(&self) -> Option<&String> {
    self.mode_of_pathogenicity.as_ref()
  }

  pub fn reset_mode_of_pathogenicity(&mut self) {
    self.mode_of_pathogenicity = None;
  }

  pub fn set_haploinsufficiency_score(&mut self, haploinsufficiency_score: String) {
    self.haploinsufficiency_score = Some(haploinsufficiency_score);
  }

  pub fn with_haploinsufficiency_score(mut self, haploinsufficiency_score: String) -> Region {
    self.haploinsufficiency_score = Some(haploinsufficiency_score);
    self
  }

  pub fn haploinsufficiency_score(&self) -> Option<&String> {
    self.haploinsufficiency_score.as_ref()
  }

  pub fn reset_haploinsufficiency_score(&mut self) {
    self.haploinsufficiency_score = None;
  }

  pub fn set_triplosensitivity_score(&mut self, triplosensitivity_score: String) {
    self.triplosensitivity_score = Some(triplosensitivity_score);
  }

  pub fn with_triplosensitivity_score(mut self, triplosensitivity_score: String) -> Region {
    self.triplosensitivity_score = Some(triplosensitivity_score);
    self
  }

  pub fn triplosensitivity_score(&self) -> Option<&String> {
    self.triplosensitivity_score.as_ref()
  }

  pub fn reset_triplosensitivity_score(&mut self) {
    self.triplosensitivity_score = None;
  }

  pub fn set_required_overlap_percentage(&mut self, required_overlap_percentage: i32) {
    self.required_overlap_percentage = required_overlap_percentage;
  }

  pub fn with_required_overlap_percentage(mut self, required_overlap_percentage: i32) -> Region {
    self.required_overlap_percentage = required_overlap_percentage;
    self
  }

  pub fn required_overlap_percentage(&self) -> &i32 {
    &self.required_overlap_percentage
  }


  pub fn set_type_of_variants(&mut self, type_of_variants: String) {
    self.type_of_variants = Some(type_of_variants);
  }

  pub fn with_type_of_variants(mut self, type_of_variants: String) -> Region {
    self.type_of_variants = Some(type_of_variants);
    self
  }

  pub fn type_of_variants(&self) -> Option<&String> {
    self.type_of_variants.as_ref()
  }

  pub fn reset_type_of_variants(&mut self) {
    self.type_of_variants = None;
  }

  pub fn set_publications(&mut self, publications: Vec<String>) {
    self.publications = publications;
  }

  pub fn with_publications(mut self, publications: Vec<String>) -> Region {
    self.publications = publications;
    self
  }

  pub fn publications(&self) -> &Vec<String> {
    &self.publications
  }


  pub fn set_evidence(&mut self, evidence: Vec<String>) {
    self.evidence = evidence;
  }

  pub fn with_evidence(mut self, evidence: Vec<String>) -> Region {
    self.evidence = evidence;
    self
  }

  pub fn evidence(&self) -> &Vec<String> {
    &self.evidence
  }


  pub fn set_phenotypes(&mut self, phenotypes: Vec<String>) {
    self.phenotypes = phenotypes;
  }

  pub fn with_phenotypes(mut self, phenotypes: Vec<String>) -> Region {
    self.phenotypes = phenotypes;
    self
  }

  pub fn phenotypes(&self) -> &Vec<String> {
    &self.phenotypes
  }


  pub fn set_mode_of_inheritance(&mut self, mode_of_inheritance: String) {
    self.mode_of_inheritance = mode_of_inheritance;
  }

  pub fn with_mode_of_inheritance(mut self, mode_of_inheritance: String) -> Region {
    self.mode_of_inheritance = mode_of_inheritance;
    self
  }

  pub fn mode_of_inheritance(&self) -> &String {
    &self.mode_of_inheritance
  }


  pub fn set_chromosome(&mut self, chromosome: String) {
    self.chromosome = chromosome;
  }

  pub fn with_chromosome(mut self, chromosome: String) -> Region {
    self.chromosome = chromosome;
    self
  }

  pub fn chromosome(&self) -> &String {
    &self.chromosome
  }


  pub fn set_grch37_coordinates(&mut self, grch37_coordinates: Vec<i32>) {
    self.grch37_coordinates = grch37_coordinates;
  }

  pub fn with_grch37_coordinates(mut self, grch37_coordinates: Vec<i32>) -> Region {
    self.grch37_coordinates = grch37_coordinates;
    self
  }

  pub fn grch37_coordinates(&self) -> &Vec<i32> {
    &self.grch37_coordinates
  }


  pub fn set_grch38_coordinates(&mut self, grch38_coordinates: Vec<i32>) {
    self.grch38_coordinates = grch38_coordinates;
  }

  pub fn with_grch38_coordinates(mut self, grch38_coordinates: Vec<i32>) -> Region {
    self.grch38_coordinates = grch38_coordinates;
    self
  }

  pub fn grch38_coordinates(&self) -> &Vec<i32> {
    &self.grch38_coordinates
  }


  pub fn set_tags(&mut self, tags: Vec<String>) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: Vec<String>) -> Region {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> Option<&Vec<String>> {
    self.tags.as_ref()
  }

  pub fn reset_tags(&mut self) {
    self.tags = None;
  }

  pub fn set_panel(&mut self, panel: crate::genes::cli::data::panelapp::Panel) {
    self.panel = Some(panel);
  }

  pub fn with_panel(mut self, panel: crate::genes::cli::data::panelapp::Panel) -> Region {
    self.panel = Some(panel);
    self
  }

  pub fn panel(&self) -> Option<&crate::genes::cli::data::panelapp::Panel> {
    self.panel.as_ref()
  }

  pub fn reset_panel(&mut self) {
    self.panel = None;
  }

}



